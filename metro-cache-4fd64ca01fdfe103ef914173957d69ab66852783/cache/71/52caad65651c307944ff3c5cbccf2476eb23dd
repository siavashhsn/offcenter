__d(function (global, _require, module, exports, _dependencyMap) {
  'use strict';

  function componentWillMount() {
    var state = this.constructor.getDerivedStateFromProps(this.props, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillReceiveProps(nextProps) {
    var state = this.constructor.getDerivedStateFromProps(nextProps, this.state);

    if (state !== null && state !== undefined) {
      this.setState(state);
    }
  }

  function componentWillUpdate(nextProps, nextState) {
    try {
      var prevProps = this.props;
      var prevState = this.state;
      this.props = nextProps;
      this.state = nextState;
      this.__reactInternalSnapshotFlag = true;
      this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);
    } finally {
      this.props = prevProps;
      this.state = prevState;
    }
  }

  componentWillMount.__suppressDeprecationWarning = true;
  componentWillReceiveProps.__suppressDeprecationWarning = true;
  componentWillUpdate.__suppressDeprecationWarning = true;

  function polyfill(Component) {
    if (!Component.prototype || !Component.prototype.isReactComponent) {
      throw new Error('Can only polyfill class components');
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      if (typeof Component.prototype.componentWillMount === 'function') {
        throw new Error('Cannot polyfill getDerivedStateFromProps() for components that define componentWillMount()');
      } else if (typeof Component.prototype.componentWillReceiveProps === 'function') {
        throw new Error('Cannot polyfill getDerivedStateFromProps() for components that define componentWillReceiveProps()');
      }

      Component.prototype.componentWillMount = componentWillMount;
      Component.prototype.componentWillReceiveProps = componentWillReceiveProps;
    }

    if (typeof Component.prototype.getSnapshotBeforeUpdate === 'function') {
      if (typeof Component.prototype.componentWillUpdate === 'function') {
        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that define componentWillUpdate()');
      }

      if (typeof Component.prototype.componentDidUpdate !== 'function') {
        throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');
      }

      Component.prototype.componentWillUpdate = componentWillUpdate;
      var componentDidUpdate = Component.prototype.componentDidUpdate;

      Component.prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {
        var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;
        componentDidUpdate.call(this, prevProps, prevState, snapshot);
      };
    }

    return Component;
  }

  module.exports = polyfill;
});