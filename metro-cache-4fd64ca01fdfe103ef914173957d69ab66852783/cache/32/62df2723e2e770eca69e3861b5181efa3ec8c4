__d(function (global, _require, module, exports, _dependencyMap) {
  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp,
      _jsxFileName = "/home/siavash/off-center/node_modules/react-native-google-signin/src/GoogleSignin.android.js";

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    GoogleSigninButton: {
      displayName: "GoogleSigninButton"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/siavash/off-center/node_modules/react-native-google-signin/src/GoogleSignin.android.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var RNGoogleSignin = _reactNative.NativeModules.RNGoogleSignin;
  var RNGoogleSigninButton = (0, _reactNative.requireNativeComponent)('RNGoogleSigninButton', null);

  var GoogleSigninButton = _wrapComponent("GoogleSigninButton")((_temp = _class = function (_Component) {
    _inherits(GoogleSigninButton, _Component);

    function GoogleSigninButton() {
      _classCallCheck(this, GoogleSigninButton);

      return _possibleConstructorReturn(this, (GoogleSigninButton.__proto__ || Object.getPrototypeOf(GoogleSigninButton)).apply(this, arguments));
    }

    _createClass(GoogleSigninButton, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        this._clickListener = _reactNative.DeviceEventEmitter.addListener('RNGoogleSigninButtonClicked', function () {
          _this2.props.onPress && _this2.props.onPress();
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this._clickListener && this._clickListener.remove();
      }
    }, {
      key: "render",
      value: function render() {
        var _props = this.props,
            style = _props.style,
            props = _objectWithoutProperties(_props, ["style"]);

        return _react3.default.createElement(RNGoogleSigninButton, _extends({
          style: [{
            backgroundColor: 'transparent'
          }, style]
        }, props, {
          __source: {
            fileName: _jsxFileName,
            lineNumber: 37
          }
        }));
      }
    }]);

    return GoogleSigninButton;
  }(_react2.Component), _class.propTypes = _extends({}, _reactNative.ViewPropTypes, {
    size: _propTypes2.default.number,
    color: _propTypes2.default.number
  }), _temp));

  GoogleSigninButton.Size = {
    Icon: RNGoogleSignin.BUTTON_SIZE_ICON,
    Standard: RNGoogleSignin.BUTTON_SIZE_STANDARD,
    Wide: RNGoogleSignin.BUTTON_SIZE_WIDE
  };
  GoogleSigninButton.Color = {
    Auto: RNGoogleSignin.BUTTON_COLOR_AUTO,
    Light: RNGoogleSignin.BUTTON_COLOR_LIGHT,
    Dark: RNGoogleSignin.BUTTON_COLOR_DARK
  };

  var GoogleSigninError = function (_Error) {
    _inherits(GoogleSigninError, _Error);

    function GoogleSigninError(error, code) {
      _classCallCheck(this, GoogleSigninError);

      var _this3 = _possibleConstructorReturn(this, (GoogleSigninError.__proto__ || Object.getPrototypeOf(GoogleSigninError)).call(this, error));

      _this3.name = 'GoogleSigninError';
      _this3.code = code;
      return _this3;
    }

    return GoogleSigninError;
  }(Error);

  var GoogleSignin = function () {
    function GoogleSignin() {
      _classCallCheck(this, GoogleSignin);

      this._user = null;
    }

    _createClass(GoogleSignin, [{
      key: "hasPlayServices",
      value: function hasPlayServices() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          autoResolve: true
        };
        return RNGoogleSignin.playServicesAvailable(params.autoResolve);
      }
    }, {
      key: "configure",
      value: function configure() {
        var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        params = [params.scopes || [], params.webClientId || null, params.offlineAccess || false, params.forceConsentPrompt || false, params.accountName || null, params.hostedDomain || null];
        return RNGoogleSignin.configure.apply(RNGoogleSignin, _toConsumableArray(params));
      }
    }, {
      key: "currentUserAsync",
      value: function currentUserAsync() {
        var _this4 = this;

        return new Promise(function (resolve, reject) {
          var sucessCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleSignInSilentSuccess', function (user) {
            _this4._user = _extends({}, user);
            RNGoogleSignin.getAccessToken(user).then(function (token) {
              _this4._user.accessToken = token;

              _this4._removeListeners(sucessCb, errorCb);

              resolve(_this4._user);
            }).catch(function (err) {
              _this4._removeListeners(sucessCb, errorCb);

              resolve(_this4._user);
            });
          });

          var errorCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleSignInSilentError', function (err) {
            _this4._removeListeners(sucessCb, errorCb);

            resolve(null);
          });

          RNGoogleSignin.currentUserAsync();
        });
      }
    }, {
      key: "currentUser",
      value: function currentUser() {
        return _extends({}, this._user);
      }
    }, {
      key: "signIn",
      value: function signIn() {
        var _this5 = this;

        return new Promise(function (resolve, reject) {
          var sucessCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleSignInSuccess', function (user) {
            _this5._user = _extends({}, user);
            RNGoogleSignin.getAccessToken(user).then(function (token) {
              _this5._user.accessToken = token;

              _this5._removeListeners(sucessCb, errorCb);

              resolve(_this5._user);
            }).catch(function (err) {
              _this5._removeListeners(sucessCb, errorCb);

              resolve(_this5._user);
            });
          });

          var errorCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleSignInError', function (err) {
            _this5._removeListeners(sucessCb, errorCb);

            reject(new GoogleSigninError(err.error, err.code));
          });

          RNGoogleSignin.signIn();
        });
      }
    }, {
      key: "signOut",
      value: function signOut() {
        var _this6 = this;

        return new Promise(function (resolve, reject) {
          var sucessCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleSignOutSuccess', function () {
            _this6._removeListeners(sucessCb, errorCb);

            resolve();
          });

          var errorCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleSignOutError', function (err) {
            _this6._removeListeners(sucessCb, errorCb);

            reject(new GoogleSigninError(err.error, err.code));
          });

          _this6._user = null;
          RNGoogleSignin.signOut();
        });
      }
    }, {
      key: "revokeAccess",
      value: function revokeAccess() {
        var _this7 = this;

        return new Promise(function (resolve, reject) {
          var sucessCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleRevokeSuccess', function () {
            _this7._removeListeners(sucessCb, errorCb);

            resolve();
          });

          var errorCb = _reactNative.DeviceEventEmitter.addListener('RNGoogleRevokeError', function (err) {
            _this7._removeListeners(sucessCb, errorCb);

            reject(new GoogleSigninError(err.error, err.code));
          });

          RNGoogleSignin.revokeAccess();
        });
      }
    }, {
      key: "_removeListeners",
      value: function _removeListeners() {
        for (var _len = arguments.length, listeners = Array(_len), _key = 0; _key < _len; _key++) {
          listeners[_key] = arguments[_key];
        }

        listeners.forEach(function (lt) {
          return lt.remove();
        });
      }
    }]);

    return GoogleSignin;
  }();

  module.exports = {
    GoogleSignin: new GoogleSignin(),
    GoogleSigninButton: GoogleSigninButton
  };
});