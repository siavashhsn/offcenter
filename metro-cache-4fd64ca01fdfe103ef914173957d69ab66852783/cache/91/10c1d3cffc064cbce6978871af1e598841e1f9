__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _jsxFileName = "/home/siavash/off-center/node_modules/react-native-timer-countdown/index.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _propTypes = _require(_dependencyMap[2], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _reactNative = _require(_dependencyMap[3], "react-native");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    TimerCountdown: {
      displayName: "TimerCountdown"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/siavash/off-center/node_modules/react-native-timer-countdown/index.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ViewPropTypes = _reactNative.ViewPropTypes || _reactNative.View.propTypes;

  var TimerCountdown = _wrapComponent("TimerCountdown")(function (_React$Component) {
    _inherits(TimerCountdown, _React$Component);

    function TimerCountdown(props) {
      _classCallCheck(this, TimerCountdown);

      var _this = _possibleConstructorReturn(this, (TimerCountdown.__proto__ || Object.getPrototypeOf(TimerCountdown)).call(this, props));

      _this.state = {
        secondsRemaining: _this.props.initialSecondsRemaining,
        timeoutId: null,
        previousSeconds: null
      };
      _this.mounted = false;
      _this.tick = _this.tick.bind(_this);
      _this.getFormattedTime = _this.getFormattedTime.bind(_this);
      return _this;
    }

    _createClass(TimerCountdown, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.mounted = true;
        this.tick();
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(newProps) {
        if (this.state.timeoutId) {
          clearTimeout(this.state.timeoutId);
        }

        this.setState({
          previousSeconds: null,
          secondsRemaining: newProps.initialSecondsRemaining
        });
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(nextProps, nextState) {
        if (!this.state.previousSeconds && this.state.secondsRemaining > 0 && this.mounted) {
          this.tick();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.mounted = false;
        clearTimeout(this.state.timeoutId);
      }
    }, {
      key: "tick",
      value: function tick() {
        var currentSeconds = Date.now();
        var dt = this.state.previousSeconds ? currentSeconds - this.state.previousSeconds : 0;
        var interval = this.props.interval;
        var intervalSecondsRemaing = interval - dt % interval;
        var timeout = intervalSecondsRemaing;

        if (intervalSecondsRemaing < interval / 2.0) {
          timeout += interval;
        }

        var secondsRemaining = Math.max(this.state.secondsRemaining - dt, 0);
        var isComplete = this.state.previousSeconds && secondsRemaining <= 0;

        if (this.mounted) {
          if (this.state.timeoutId) {
            clearTimeout(this.state.timeoutId);
          }

          this.setState({
            timeoutId: isComplete ? null : setTimeout(this.tick, timeout),
            previousSeconds: currentSeconds,
            secondsRemaining: secondsRemaining
          });
        }

        if (isComplete) {
          if (this.props.onTimeElapsed) {
            this.props.onTimeElapsed();
          }

          return;
        }

        if (this.props.onTick) {
          this.props.onTick(secondsRemaining);
        }
      }
    }, {
      key: "getFormattedTime",
      value: function getFormattedTime(milliseconds) {
        if (this.props.formatSecondsRemaining) {
          return this.props.formatSecondsRemaining(milliseconds);
        }

        var totalSeconds = Math.round(milliseconds / 1000);
        var seconds = parseInt(totalSeconds % 60, 10);
        var minutes = parseInt(totalSeconds / 60, 10) % 60;
        var hours = parseInt(totalSeconds / 3600, 10);
        seconds = seconds < 10 ? '0' + seconds : seconds;
        minutes = minutes < 10 ? '0' + minutes : minutes;
        hours = hours < 10 ? '0' + hours : hours;
        hours = hours === '00' ? '' : hours + ':';
        return hours + minutes + ':' + seconds;
      }
    }, {
      key: "render",
      value: function render() {
        var secondsRemaining = this.state.secondsRemaining;
        return _react3.default.createElement(
          _reactNative.Text,
          {
            allowFontScaling: this.props.allowFontScaling,
            style: this.props.style,
            __source: {
              fileName: _jsxFileName,
              lineNumber: 108
            }
          },
          this.getFormattedTime(secondsRemaining)
        );
      }
    }]);

    return TimerCountdown;
  }(_react3.default.Component));

  exports.default = TimerCountdown;
  TimerCountdown.defaultProps = {
    interval: 1000,
    formatSecondsRemaining: null,
    onTick: null,
    onTimeElapsed: null,
    allowFontScaling: false,
    style: {}
  };
  TimerCountdown.propTypes = {
    initialSecondsRemaining: _propTypes2.default.number.isRequired,
    interval: _propTypes2.default.number,
    formatSecondsRemaining: _propTypes2.default.func,
    onTick: _propTypes2.default.func,
    onTimeElapsed: _propTypes2.default.func,
    allowFontScaling: _propTypes2.default.bool,
    style: _reactNative.Text.propTypes.style
  };
});